{
  "importEverything": {
    "prefix": "ime",
    "body": ["import * as ${2:second} from '${1:first}'"]
  },
  "exportType": {
    "body": ["export type ${1:first} = {${2:second}}"],
    "prefix": "exptp"
  },
  "exportInterface": {
    "prefix": "expint",
    "body": ["export interface ${1:first} {${2:second}}"]
  },
  "Interface Definition": {
    "prefix": "iface",
    "body": ["interface ${1:name} {", "  $0", "}"],
    "description": "Interface Definition"
  },
  "Type Defination": {
    "prefix": "type",
    "body": ["type ${1:name} = {", "  $0", "}"],
    "description": "Type Defination"
  },
  "Constructor": {
    "prefix": "ctor",
    "body": [
      "constructor() {",
      "\tsuper();",
      "\t$0",
      "}"
    ],
    "description": "Constructor"
  },
  "Class Definition": {
    "prefix": "class",
    "body": [
      "class ${1:name} {",
      " constructor(${2:parameters}) {",
      "   $0",
      " }",
      "}"
    ],
    "description": "Class Definition"
  },
  "For Loop": {
    "prefix": "for",
    "body": [
      "for (let ${1:index} = 0; ${1:index} < ${2:array}.length; ${1:index}++) {",
      "  $0",
      "}"
    ],
    "description": "For Loop"
  },
  "For-Each Loop using =>": {
    "prefix": "foreach =>",
    "body": ["${1:array}.forEach(${2:element} => {", "\t$0", "});"],
    "description": "For-Each Loop using =>"
  },
  "For-In Loop": {
    "prefix": "forin",
    "body": [
      "for (const ${1:key} in ${2:object}) {",
      "  $0",
      "}"
    ],
    "description": "For-In Loop"
  },
  "For-Of Loop": {
    "prefix": "forof",
    "body": ["for (const ${1:iterator} of ${2:object}) {", "\t$0", "}"],
    "description": "For-Of Loop"
  },
  "console.log": {
    "prefix": "clg",
    "body": ["console.log('$1')"],
    "description": "Log output to console"
  },
  "console.error": {
    "prefix": "cer",
    "body": ["console.error('$1')"],
    "description": "Log error to console"
  },
  "console.warn": {
    "prefix": "cwa",
    "body": ["console.warn('$1')"],
    "description": "Log warn to console"
  },
  "Function Defination": {
    "prefix": "func",
    "body": ["function ${1:name}(${2:parameters}) {", "  $0", "}"],
    "description": "Function Defination"
  },
  "Arrow Function Defination": {
    "prefix": "arrow",
    "body": ["const ${1:name} = (${2:parameters}) => {", "  $0", "}"],
    "description": "Arrow Function Defination"
  },
  "React Function Component": {
    "prefix": "rsf",
    "body": [
      "export default function ${1:name}() {",
      "  return (",
      "    <div>${2:content}</div>",
      "  )",
      "}"
    ],
    "description": "React function component"
  },
  "typescriptReactFunctionalComponent": {
    "prefix": "tsrsf",
    "body": [
      "type ${0:props} = {}",
      "",
      "export default function ${1:name}({}: ${0:props}) {",
      "  return (",
      "    <div>${2:content}</div>",
      "  )",
      "}"
    ],
    "description": "Creates a React Functional Component with ES7 module system and TypeScript interface"
  },
  "useCallback": {
    "prefix": "ucall",
    "body": [
      "useCallback(() => {",
      "  ${1:first}",
      "}, [${3:third}])",
      ""
    ]
  },
  "useContext": {
    "prefix": "ucont",
    "body": ["const ${1:first} = useContext(${2:second})"]
  },
  "useEffect": {
    "prefix": "ueff",
    "body": [
      "useEffect(() => {",
      "  ${1:first}",
      "}, [${3:third}])",
      ""
    ]
  },
  "useLayoutEffect": {
    "prefix": "uleff",
    "body": [
      "useLayoutEffect(() => {",
      "  ${1:first}",
      "}, [${3:third}])"
    ]
  },
  "useMemo": {
    "prefix": "umemo",
    "body": ["useMemo(() => ${1:first}, [${2:second}])"]
  },
  "useRef": {
    "prefix": "uref",
    "body": ["const ${1:first} = useRef(${2:second})"]
  },
  "useState": {
    "prefix": "ustate",
    "body": [
      "const [${1:first}, set${1/(.*)/${1:/capitalize}/}] = useState(${2:second})"
    ]
  },
  "useSelector": {
    "prefix": "uselect",
    "body": ["const ${1:first} = useSelector(${2:second})"]
  }
}
